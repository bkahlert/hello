service: hello
frameworkVersion: '3'

# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml
provider:
  name: aws
  runtime: java11
  architecture: arm64

  region: ${opt:region, 'eu-central-1'}
  memorySize: 1000
  deploymentMethod: direct
  tracing:
    apiGateway: true
    lambda: true

  environment:
    DOMAIN: ${self:custom.customDomain.domainName}
    STAGE: ${sls:stage}
    # TODO inject directly into web-app
    COGNITO_DOMAIN:
      Fn::Join: ['', ['https://', {Ref: UserPoolDomain}, '.auth.${aws:region}.amazoncognito.com']]
    COGNITO_WEB_APP_CLIENT_ID: {Ref: UserPoolClient}
    DYNAMODB_PROPS_TABLE: ${self:service}-props-${sls:stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Get*
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-props-${sls:stage}
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource:
            - '*'

  httpApi:
    authorizers:
      cognitoJwtAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join: ['', ['https://cognito-idp.${aws:region}.amazonaws.com/', {Ref: UserPool}]]
        audience:
          - {Ref: UserPoolClient}
    cors:
      allowedOrigins:
        - 'https://${self:custom.domains.${sls:stage}.domainName}'
        - 'https://${self:custom.customDomain.domainName}'
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods: [GET, POST, OPTIONS, PATCH, DELETE]
      allowCredentials: true

package:
  artifact: build/libs/serverless-all.jar

functions:
  handleRoot:
    handler: com.bkahlert.hello.api.RootHandler
    events:
      - httpApi:
          path: /
          method: get
  auth:
    handler: com.bkahlert.hello.api.auth.AuthHandler
    events:
      - httpApi:
          path: /auth
          method: get
      - httpApi:
          path: /user
          method: get
          authorizer:
            name: cognitoJwtAuthorizer
  handleClickUp:
    handler: com.bkahlert.hello.api.clickup.ClickUpHandler
    events:
      - httpApi:
          path: /clickup/{path+}
          method: any
          authorizer:
            name: cognitoJwtAuthorizer
    environment:
      # https://eu-central-1.console.aws.amazon.com/systems-manager/parameters/?region=eu-central-1&tab=Table
      CLICKUP_URL: https://api.clickup.com/api/v2
      CLICKUP_API_TOKEN: ${ssm:/clickup_api_token}
      CLICKUP_CLIENT_ID: ${ssm:/clickup_client_id}
      CLICKUP_CLIENT_SECRET: ${ssm:/clickup_client_secret}
  getProp:
    handler: com.bkahlert.hello.api.props.PropsHandler
    events:
      - httpApi:
          path: /props/{id}
          method: get
          authorizer:
            name: cognitoJwtAuthorizer
  setProp:
    handler: com.bkahlert.hello.api.props.PropsHandler
    events:
      - httpApi:
          path: /props/{id}
          method: post
          authorizer:
            name: cognitoJwtAuthorizer

custom:
  domains:
    prod:
      shortName: hello
      domainName: hello.aws.choam.de
      certificateName: hello.aws.choam.de
    dev:
      shortName: hello-dev
      domainName: hello-dev.aws.choam.de
      certificateName: hello-dev.aws.choam.de

  # Amazon Certificate Manager
  customCertificate:
    region: us-east-1 # required for CloudFront
    hostedZoneNames: aws.choam.de.
    certificateName: ${self:custom.domains.${sls:stage}.certificateName}
    subjectAlternativeNames:
      - '*.${self:custom.domains.${sls:stage}.certificateName}'

  # Route53
  customDomain:
    domainName: 'api.${self:custom.domains.${sls:stage}.domainName}'
    certificateName: ${self:custom.domains.${sls:stage}.certificateName}
    createRoute53Record: true # creates A and AAAA records
    autoDomain: true # runs as part of deploy and remove

    apiType: http
    basePath: ''
    hostedZoneId: Z01449492IRUS6954XDJ4
    endpointType: REGIONAL

  s3Sync:
    - bucketName: ${self:custom.domains.${sls:stage}.domainName}
      localDir: build/web-app
    # TODO add dependency to :web-app:jsBrowserProductionWebpack, see https://docs.gradle.org/current/userguide/cross_project_publications.html
  # TODO filter application.dev.json

  # TODO create CloudFront distribution with alternate domain name ${self:custom.domains.${sls:stage}.domainName}
  # TODO create CNAME for ${self:custom.domains.${sls:stage}.domainName} pointing to distribution domain name

# see https://www.serverless.com/framework/docs/providers/aws/guide/resources
# TODO outsource using https://www.serverless.com/framework/docs/providers/aws/guide/variables#multiple-configuration-files
resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.domains.${sls:stage}.domainName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: ['', ['arn:aws:s3:::', {Ref: StaticSite}, '/*']]

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.domains.${sls:stage}.shortName}

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: '${self:custom.domains.${sls:stage}.shortName}-bkahlert-com'
        UserPoolId: {Ref: UserPool}

    SignInWithApple:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderDetails:
          # https://eu-central-1.console.aws.amazon.com/secretsmanager/listsecrets?region=eu-central-1
          team_id: '{{resolve:secretsmanager:${sls:stage}/${self:service}/SignInWithApple:SecretString:team_id}}'
          client_id: '{{resolve:secretsmanager:${sls:stage}/${self:service}/SignInWithApple:SecretString:client_id}}'
          key_id: '{{resolve:secretsmanager:${sls:stage}/${self:service}/SignInWithApple:SecretString:key_id}}'
          private_key: '{{resolve:secretsmanager:${sls:stage}/${self:service}/SignInWithApple:SecretString:private_key}}'
        ProviderName: SignInWithApple
        ProviderType: SignInWithApple
        UserPoolId: {Ref: UserPool}

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web-app
        UserPoolId: {Ref: UserPool}
        AllowedOAuthFlows: ['code']
        AllowedOAuthScopes: ['openid']
        AllowedOAuthFlowsUserPoolClient: true
        SupportedIdentityProviders:
          - COGNITO
          - !Ref SignInWithApple
        CallbackURLs:
          - 'https://${self:custom.domains.${sls:stage}.domainName}'

    PropsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-props-${sls:stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: propId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: propId
            KeyType: RANGE


plugins:
  - serverless-s3-sync
  - serverless-domain-manager
  - serverless-certificate-creator
