service: hello
frameworkVersion: '3'

provider:
  name: aws
  runtime: java11

  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  memorySize: 1472
  deploymentMethod: direct

  environment:
    DYNAMODB_PROPS_TABLE: ${self:service}-props-${sls:stage}

  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:Get*'
            - 'dynamodb:Query'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-props-${sls:stage}

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  artifact: build/libs/serverless-all.jar

functions:
  getProp:
    handler: com.bkahlert.hello.props.Handler
    events:
      - httpApi:
          path: /props/{id}
          method: get
  setProp:
    handler: com.bkahlert.hello.props.Handler
    events:
      - httpApi:
          path: /props/{id}
          method: post
  hello:
    handler: com.serverless.Handler
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - httpApi:
          path: /
          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:eu-central-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2git

# see https://www.serverless.com/framework/docs/providers/aws/guide/resources
resources:
  Resources:
    PropsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-props-${sls:stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: propId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: propId
            KeyType: RANGE
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-offline
