service: hello
frameworkVersion: '3'

# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml
provider:
  name: aws
  runtime: java11

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  memorySize: 1472
  deploymentMethod: direct
  tracing:
    apiGateway: true
    lambda: true

  environment:
    DOMAIN: ${self:custom.customDomain.domainName}
    STAGE: ${self:provider.stage}
    DYNAMODB_PROPS_TABLE: ${self:service}-props-${sls:stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Get*
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-props-${sls:stage}
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource:
            - '*'

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  artifact: build/libs/serverless-all.jar

functions:
  clickup:
    handler: com.bkahlert.hello.clickup.Handler
    events:
      - httpApi:
          path: /{path+}
          method: any
    environment:
      CLICKUP_URL: https://api.clickup.com/api/v2
      CLICKUP_API_TOKEN: ${ssm:/clickup_api_token}
      CLICKUP_CLIENT_ID: ${ssm:/clickup_client_id}
      CLICKUP_CLIENT_SECRET: ${ssm:/clickup_client_secret}
  getProp:
    handler: com.bkahlert.hello.props.Handler
    events:
      - httpApi:
          path: /props/{id}
          method: get
  setProp:
    handler: com.bkahlert.hello.props.Handler
    events:
      - httpApi:
          path: /props/{id}
          method: post
  hello:
    handler: com.serverless.Handler
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - httpApi:
          path: /
          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:eu-central-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2git

custom:
  domains:
    prod:
      domainName: api.hello.aws.choam.de
      certificateName: api.hello.aws.choam.de
    dev:
      domainName: api-dev.hello.aws.choam.de
      certificateName: api-dev.hello.aws.choam.de

  # Amazon Certificate Manager
  customCertificate:
    # Route 53 Hosted Zone name
    # don't forget the dot on the end!
    hostedZoneNames: aws.choam.de.

    # Here we get our certificate name inside custom.domain.STAGE.certificateName
    # STAGE will be automatically filled with the value from "provider > stage"
    certificateName: ${self:custom.domains.${self:provider.stage}.certificateName}

    region: ${self:provider.region}

  # Route53
  customDomain:
    # Get value from "domains" section using stage that is being deployed
    domainName: ${self:custom.domains.${self:provider.stage}.domainName}

    # Same case of certificaName inside customCertificate
    certificateName: ${self:custom.domains.${self:provider.stage}.certificateName}

    # Enable plugin to create an A Alias and AAAA Alias records in Route53
    # mapping the domainName to the generated distribution domain name.
    createRoute53Record: true

    # Enable plugin to autorun create_domain/delete_domain as part of sls deploy/remove
    autoDomain: true

    apiType: http
    basePath: ''
    hostedZoneId: Z01449492IRUS6954XDJ4
    endpointType: REGIONAL

  #  aliasHostedZoneId: Z01449492IRUS6954XDJ4
  #  aliasDNSName: s3-website.eu-central-1.amazonaws.com
  siteName: hello.aws.choam.de
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: static
    # TODO add dependency to :web-app:jsBrowserProductionWebpack, see https://docs.gradle.org/current/userguide/cross_project_publications.html
  # TODO filter application.dev.json
  # s3-website.eu-central-1.amazonaws.com.

# see https://www.serverless.com/framework/docs/providers/aws/guide/resources
resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "StaticSite"
                    },
                    "/*"
                  ]
                ]
    #    DnsRecord:
    #      Type: "AWS::Route53::RecordSet"
    #      Properties:
    #        AliasTarget:
    #          DNSName: ${self:custom.aliasDNSName}
    #          HostedZoneId: ${self:custom.aliasHostedZoneId}
    #        HostedZoneName: ${self:custom.siteName}.
    #        Name:
    #          Ref: StaticSite
    #        Type: 'A'
    PropsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-props-${sls:stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: propId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: propId
            KeyType: RANGE
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


plugins:
  - serverless-s3-sync
  - serverless-domain-manager
  - serverless-certificate-creator
